{
	"compiler": {
		"version": "0.8.5+commit.a4f2e591"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "friendAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addFriend",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addRestaurant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "addRestaurantAfterShutdownFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beforeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentPhase",
				"outputs": [
					{
						"internalType": "enum LunchVenue.Phase",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"name": "doVote",
				"outputs": [
					{
						"internalType": "bool",
						"name": "validVote",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "friends",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "voted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "restaurantId",
						"type": "uint256"
					}
				],
				"name": "getVoteCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "voteCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isShutdown",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numFriends",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numRestaurants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "restaurants",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "shutdown",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "blocksUntilEnd",
						"type": "uint256"
					}
				],
				"name": "startVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testShutdown",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteAfterShutdownFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votedRestaurant",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "votes",
				"outputs": [
					{
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addFriend(address,string)": {
					"details": "Prevents duplication of friends",
					"params": {
						"friendAddress": "Friend's account/address",
						"name": "Friend's name"
					},
					"returns": {
						"_0": "Number of friends added so far"
					}
				},
				"addRestaurant(string)": {
					"details": "Prevents duplication of restaurants by checking name hash",
					"params": {
						"name": "Restaurant name"
					},
					"returns": {
						"_0": "Number of restaurants added so far"
					}
				},
				"doVote(uint256)": {
					"details": "Prevents duplicate votes and enforces timeout",
					"params": {
						"restaurant": "Restaurant number being voted"
					},
					"returns": {
						"validVote": "Is the vote valid? A valid vote should be from a registered  friend to a registered restaurant"
					}
				},
				"endVoting()": {
					"details": "Can be called by manager or automatically when timeout reached"
				},
				"getVoteCount(uint256)": {
					"params": {
						"restaurantId": "The restaurant ID to check"
					},
					"returns": {
						"voteCount": "Number of votes for the restaurant"
					}
				},
				"shutdown()": {
					"details": "Only manager can shutdown, prevents all future interactions"
				},
				"startVoting(uint256)": {
					"details": "Only manager can start voting and set timeout",
					"params": {
						"blocksUntilEnd": "Number of blocks until voting ends"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addFriend(address,string)": {
					"notice": "Add a new friend to voter list"
				},
				"addRestaurant(string)": {
					"notice": "Add a new restaurant"
				},
				"addRestaurantAfterShutdownFailure()": {
					"notice": "Try to add restaurant after shutdown. This should fail"
				},
				"doVote(uint256)": {
					"notice": "Vote for a restaurant"
				},
				"endVoting()": {
					"notice": "Force end voting (for timeout or manager decision)"
				},
				"getVoteCount(uint256)": {
					"notice": "Get current vote count for a restaurant"
				},
				"shutdown()": {
					"notice": "Shutdown the contract"
				},
				"startVoting(uint256)": {
					"notice": "Start the voting phase"
				},
				"testShutdown()": {
					"notice": "Test shutdown functionality"
				},
				"voteAfterShutdownFailure()": {
					"notice": "Try to vote after shutdown. This should fail #sender: account-1"
				}
			},
			"notice": "Test contract for shutdown functionality",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/LunchVenue_test.sol": "LunchVenueShutdownTest"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LunchVenue.sol": {
			"keccak256": "0xb17c3233aa2a587c7163325c86225159fc9384cb8678bcc78f844c8e053bfe62",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://c9264704380235ed520c550cf12fca4165f85d9da3043227b274a15bae448a5d",
				"dweb:/ipfs/QmWcYsv8yrcrt1Rne7dTgYtfviwyKsbdKeB6ePgRLj5MhE"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0xab088ffd1cd1033f54c2486f151b5d02281a3b76724c8e6f48479c25a4f7809e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5ddaf9976b1838f7028cbedfaf7f6e1cf8c898e100221176ff1406ee8b599f23",
				"dweb:/ipfs/QmX2FYLXYyo5Cn55ZX2CfngpscSh4mQhcMVzQdQsh2vqcG"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/LunchVenue_test.sol": {
			"keccak256": "0x83cdf4da93c2233d75b65efb2661c05f0c949fd77b5db113e68e72ae79c19b7f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f14522e21a734f4f8b47bdacb3c123c6593e46f7d13cfa0081e46706b938e346",
				"dweb:/ipfs/QmdhWqqYxWc45KihNUfBx87KnwS5ui6LvfZowDY3xvpvTe"
			]
		}
	},
	"version": 1
}