{
	"compiler": {
		"version": "0.8.5+commit.a4f2e591"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "friendAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addFriend",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addRestaurant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentPhase",
				"outputs": [
					{
						"internalType": "enum LunchVenue.Phase",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"name": "doVote",
				"outputs": [
					{
						"internalType": "bool",
						"name": "validVote",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "friends",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "voted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isShutdown",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numFriends",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numRestaurants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "restaurants",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "shutdown",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "blocksUntilEnd",
						"type": "uint256"
					}
				],
				"name": "startVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votedRestaurant",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "votes",
				"outputs": [
					{
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addFriend(address,string)": {
					"details": "Prevents duplication of friends",
					"params": {
						"friendAddress": "Friend's account/address",
						"name": "Friend's name"
					},
					"returns": {
						"_0": "Number of friends added so far"
					}
				},
				"addRestaurant(string)": {
					"details": "Prevents duplication of restaurants by checking name hash",
					"params": {
						"name": "Restaurant name"
					},
					"returns": {
						"_0": "Number of restaurants added so far"
					}
				},
				"constructor": {
					"details": "Set manager when contract starts"
				},
				"doVote(uint256)": {
					"details": "Prevents duplicate votes and enforces timeout",
					"params": {
						"restaurant": "Restaurant number being voted"
					},
					"returns": {
						"validVote": "Is the vote valid? A valid vote should be from a registered  friend to a registered restaurant"
					}
				},
				"endVoting()": {
					"details": "Can be called by manager or automatically when timeout reached"
				},
				"shutdown()": {
					"details": "Only manager can shutdown, prevents all future interactions"
				},
				"startVoting(uint256)": {
					"details": "Only manager can start voting and set timeout",
					"params": {
						"blocksUntilEnd": "Number of blocks until voting ends"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addFriend(address,string)": {
					"notice": "Add a new friend to voter list"
				},
				"addRestaurant(string)": {
					"notice": "Add a new restaurant"
				},
				"doVote(uint256)": {
					"notice": "Vote for a restaurant"
				},
				"endVoting()": {
					"notice": "Force end voting (for timeout or manager decision)"
				},
				"shutdown()": {
					"notice": "Shutdown the contract"
				},
				"startVoting(uint256)": {
					"notice": "Start the voting phase"
				}
			},
			"notice": "Solutions To 5 Weaknesses Chosen  1 (Duplicate Votes) - Added a check in doVote() using:     require(!friends[msg.sender].voted, \"You have already voted.\"); - Added bool data to a friend that get updated after a successful vote. - This ensures friends cannot vote more than once.  2 (Duplicate Friends and Restaurants) - Added a check in addFriend() to ensure the address has no associated name:     require(bytes(friends[friendAddress].name).length == 0, \"Friend already exists.\"); - Added a check in addFriend() that ensures non empty names. - This avoids a Remix bug that allows friends to be added without a name. - Added restaurantExists that maps a restaurants hash to a bool if the restaurant exists. - Added a check in addRestaurant that ensures restaurantExists is not true, which is the default if it has never been mapped:     bytes32 nameHash = keccak256(abi.encodePacked(name));     require(!restaurantExists[nameHash], \"Restaurant already exists.\"); - Added mapping in addRestaurant() to ensure their default false is toggled to true. - This ensures that neither users are unique to their address and restaurants are unique to their name.  3 (Contract Phases) - Added an enum Phase to manage contract state. - Added currentPhase to track the phase. - Added onlyDuring(phase) modifier to restrict functions like addFriend, addRestaurant, and doVote. - This ensures friends/restaurants can only be added in the setup phase, and voting only occurs in the voting phase.  4 (Timeout Functionality) - Added endBlock to track when voting ends. - Added startVoting(blocksUntilEnd) which sets endBlock to block.number + blocksUntilEnd. - Edited doVote() to check if block.number > endBlock, calling _endVoting() if true and gracefully exits. - This ensures that the voting phase will timeout after a set amount of blocks that the manager chooses. - As there is no automatic execution in Solidity, this is the closest possible method. - Added endVoting() which calls _endVoting. - This gives managers the ability to automatically end the voting phase.  5 (Shutdown Functionality) - Added a bool isShutdown to disable the contract. - Added a contractActive modifier to guard all public functions. - Added shutdown() which progresses the contract to the final stage without calculating results. - This ensures that managers have the ability to disable the contract.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/LunchVenue.sol": "LunchVenue"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LunchVenue.sol": {
			"keccak256": "0x5dca6ac490b6452ac87fa6783dc1563a56b042e2e33e23dc5700aa126ce78c33",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b796b2dc893ee154493f402040b2f47328fb4673b55e79e3a574e10b4045531e",
				"dweb:/ipfs/Qmf3GUT6GwkPrtWC3dGHK8C2zHN2BFj2qGuZoRFPdetLpA"
			]
		}
	},
	"version": 1
}